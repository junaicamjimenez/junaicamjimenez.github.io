import io.appium.java_client.AppiumBy;
import io.appium.java_client.AppiumDriver;
import io.appium.java_client.MobileElement;
import io.appium.java_client.android.AndroidDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.PointerInput;
import org.openqa.selenium.interactions.Sequence;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import java.util.Collections;

public class XureMember {

    static AppiumDriver driver;

    public static void main(String[] args) throws MalformedURLException, InterruptedException {
        openMobileApp();

         Perform the first swipe from 1st to 2nd screen
        swipeScreen();

         Wait for the 2nd screen to load (if necessary)
        Thread.sleep(2000);  Adjust the sleep time as needed

         Perform the second swipe from 2nd to 3rd screen
        swipeScreen();

        click login button
        logInButton();

        loginScreen - click log in button
        signUpScreen();


    }

    public static void openMobileApp() throws MalformedURLException {
        DesiredCapabilities cap = new DesiredCapabilities();

        cap.setCapability(deviceName, JauneAndroid);
        cap.setCapability(udid, c8ee9635);
        cap.setCapability(platformName, Android);
        cap.setCapability(platformVersion, 13);
        cap.setCapability(automationName, uiAutomator2);
        cap.setCapability(appPackage, com.xdeal);
        cap.setCapability(appActivity, com.xdeal.MainActivity);
        cap.setCapability(autoAcceptAlerts, true);

        URL url = new URL(http127.0.0.14723);
        driver = new AndroidDriver(url, cap);

        handlePermissions();

        System.out.println(Application started);

         After handling permissions, click on Get Started
        clickGetStarted();





    }

    public static void handlePermissions() {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        try {
             Handle the first permission Allow
            try {
                WebElement allowButton = wait.until(ExpectedConditions.visibilityOfElementLocated(
                        new AppiumBy.ByAndroidUIAutomator(new UiSelector().resourceId(com.android.permissioncontrolleridpermission_allow_button))));
                if (allowButton != null && allowButton.isDisplayed()) {
                    allowButton.click();
                    System.out.println(Clicked 'Allow' button);
                }
            } catch (Exception e) {
                System.out.println('Allow' button not found);
            }

            Thread.sleep(1000);

             Handle the second permission While using the app
            try {
                WebElement whileUsingButton = wait.until(ExpectedConditions.visibilityOfElementLocated(
                        new AppiumBy.ByAndroidUIAutomator(new UiSelector().textContains(While using the app))));
                if (whileUsingButton != null && whileUsingButton.isDisplayed()) {
                    whileUsingButton.click();
                    System.out.println(Clicked 'While using the app' button for the second permission);
                }
            } catch (Exception e) {
                System.out.println('While using the app' button not found for the second permission);
            }

            Thread.sleep(1000);

             Handle the third permission Allow
            try {
                WebElement whileUsingButton2 = wait.until(ExpectedConditions.visibilityOfElementLocated(
                        new AppiumBy.ByAndroidUIAutomator(new UiSelector().resourceId(com.android.permissioncontrolleridpermission_allow_foreground_only_button))));
                if (whileUsingButton2 != null && whileUsingButton2.isDisplayed()) {
                    whileUsingButton2.click();
                    System.out.println(Clicked 'While using the app' button for the third permission);
                }
            } catch (Exception e) {
                System.out.println(While using the app' button not found for the third permission);
            }

        } catch (Exception e) {
            System.out.println(No more permission dialogs to handle);
        }
    }

    public static void clickGetStarted() {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        try {
            WebElement getStartedButton = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    new AppiumBy.ByAndroidUIAutomator(new UiSelector().text(Get Started))));
            if (getStartedButton != null && getStartedButton.isDisplayed()) {
                getStartedButton.click();
                System.out.println(Clicked 'Get Started' button);
            } else {
                System.out.println('Get Started' button not found);
            }
        } catch (Exception e) {
            System.out.println('Get Started' button not found or clickable);
        }
    }

    public static void swipeScreen() throws InterruptedException {
        Dimension size = driver.manage().window().getSize();
        int startX = (int) (size.getWidth()  0.9);
        int endX = (int) (size.getWidth()  0.1);
        int startY = size.getHeight()  2;

        PointerInput finger = new PointerInput(PointerInput.Kind.TOUCH, finger1);
        Sequence swipe = new Sequence(finger, 1);
        swipe.addAction(finger.createPointerMove(Duration.ofMillis(0),
                PointerInput.Origin.viewport(), startX, startY));
        swipe.addAction(finger.createPointerDown(PointerInput.MouseButton.LEFT.asArg()));
        swipe.addAction(finger.createPointerMove(Duration.ofMillis(1000),
                PointerInput.Origin.viewport(), endX, startY));
        swipe.addAction(finger.createPointerUp(PointerInput.MouseButton.LEFT.asArg()));

        driver.perform(Collections.singletonList(swipe));

        Thread.sleep(1000);  Adding a delay for visibility
    }

    Clicked Log In button
    public static void logInButton(){
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));

        try {
            WebElement logInButton = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    new AppiumBy.ByAndroidUIAutomator(new UiSelector().className(android.view.ViewGroup).instance(15))));
            if (logInButton != null && logInButton.isDisplayed()) {
                logInButton.click();
                System.out.println(Clicked 'Log In' button);
            } else {
                System.out.println('Log In' button not found);
            }
        } catch (Exception e) {
            System.out.println('Log In' button not found or clickable);
        }
    }
    public static void signUpScreen(){
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        try {
             Assuming you need to input text in a text field with certain locator strategy
            WebElement usernameOrEmailField = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    new AppiumBy.ByAndroidUIAutomator(new UiSelector().text(Email address or Username))));
            if (usernameOrEmailField != null && usernameOrEmailField.isDisplayed()) {
                usernameOrEmailField.sendKeys(_lalisamanobann);   Replace your_username with the actual username you want to input
                System.out.println(Entered username or email);
            } else {
                System.out.println(Username field not found);
            }

             Similarly, locate and input text in other fields as needed
            WebElement passwordField = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    new AppiumBy.ByAndroidUIAutomator(new UiSelector().text(Password))));
            if (passwordField != null && passwordField.isDisplayed()) {
                passwordField.sendKeys(Tiger123@);   Replace your_password with the actual password
                System.out.println(Entered password);
            } else {
                System.out.println(Password field not found);
            }

             Add more fields and their handling as required

             Example Click on the Log In button
            WebElement LogInButton = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    new AppiumBy.ByAndroidUIAutomator(new UiSelector().className(android.view.ViewGroup).instance(18))));
            if (LogInButton != null && LogInButton.isDisplayed()) {
                LogInButton.click();
                System.out.println(Clicked 'Log In' button);
            } else {
                System.out.println('Log In' button not found);
            }

        } catch (Exception e) {
            System.out.println(Error in signing up  + e.getMessage());
        }
    }

}
